


<script src="https://unpkg.com/split-type"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.3/gsap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.3/ScrollTrigger.min.js"></script>
<script>
window.addEventListener("DOMContentLoaded", (event) => {
  // Split text into spans
  let typeSplit = new SplitType("[text-split]", {
    types: "words, chars",
    tagName: "span"
  });

  // Link timelines to scroll position
  function createScrollTrigger(triggerElement, timeline) {
    // Reset tl when scroll out of view past bottom of screen
    ScrollTrigger.create({
      trigger: triggerElement,
      start: "top bottom",
      onLeaveBack: () => {
        timeline.progress(0);
        timeline.pause();
      }
    });
    // Play tl when scrolled into view (60% from top of screen)
    ScrollTrigger.create({
      trigger: triggerElement,
      start: "top 85%",
      onEnter: () => timeline.play()
    });
  }

  $("[letters-slide-up-title]").each(function (index) {
    let tl = gsap.timeline({ paused: true });
    tl.from($(this).find(".char"), { yPercent: 100, duration: 0.4, ease: "power1.out", stagger: { amount: 0.6 } });
    createScrollTrigger($(this), tl);
  });
  

  $("[letters-slide-up-title]").each(function (index) {
    let tl = gsap.timeline({ paused: true });
    tl.from($(this).find(".char"), { yPercent: 100, duration: 0.4, ease: "power1.out", stagger: { amount: 0.6 } });
    createScrollTrigger($(this), tl);
  });

 


  $("[scrub-each-word]").each(function (index) {
    let tl = gsap.timeline({
      scrollTrigger: {
        trigger: $(this),
        start: "top 90%",
        end: "top center",
        scrub: true
      }
    });
    tl.from($(this).find(".word"), { opacity: 0.2, duration: 0.2, ease: "power1.out", stagger: { each: 0.4 } });
  });

  // Avoid flash of unstyled content
  gsap.set("[text-split]", { opacity: 1 });
});
</script>




<script>

window.addEventListener('scroll', function() {
  // Zoek het element met de klasse "xx"
  var element = document.querySelector('.xx');
  var bgColor = window.getComputedStyle(element).backgroundColor;

  if (bgColor === 'rgb(204, 68, 41)') {
  
 	  var element = document.getElementsByClassName('linkss')[0];
  	element.style.display = 'none';
    
    
    
    // Zoek het video-element op basis van de klasse "videot"
    var videos = document.getElementsByClassName('videot');
    if (videos.length > 0) {
      var video = videos[0];
      video.play();
      console.log('play video CC');
    
      var videok = document.getElementsByClassName('video');
      if (videok.length > 0) {
        var videoq = videok[0];
        videoq.pause();
        videoq.currentTime = 0;
        console.log('Video SS is gepauzeerd en op 0 seconden gezet.');
      }
    }
  } else {
  	    
   	var element = document.getElementsByClassName('linkss')[0];
  	element.style.display = 'block';
        
    var videos = document.getElementsByClassName('videot');
    if (videos.length > 0) {
      var video = videos[0];
      video.pause();
      video.currentTime = 0;
      console.log('Video CC is gepauzeerd en op 0 seconden gezet.');
        }
        
      var videok = document.getElementsByClassName('video');
      if (videok.length > 0) {
        var videoq = videok[0];
        videoq.play();
        console.log('Video SS is play en op.');
      }

}
  
});




function playPauseVideo() {
    let videos = document.querySelectorAll("video");
    videos.forEach((video) => {
        // We can only control playback without insteraction if video is mute
        video.muted = true;
        // Play is a promise so we need to check we have it
        let playPromise = video.play();
        if (playPromise !== undefined) {
            playPromise.then((_) => {
                let observer = new IntersectionObserver(
                    (entries) => {
                        entries.forEach((entry) => {
                            if (
                                entry.intersectionRatio !== 1 &&
                                !video.paused
                            ) {
                                video.pause();
                                video.currentTime = 0;

                            } else if (video.paused) {
                                video.play();
                            }
                        });
                    },
                    { threshold: 0.2 }
                );
                observer.observe(video);
            });
        }
    });
}




// And you would kick this off where appropriate with:
playPauseVideo();



</script>


<script>
// CONSTANTS
let imageUrls = [

"https://uploads-ssl.webflow.com/64ff0f7cb968ca95de794a01/652d1d4879b85b719239081b_1.png",
"https://uploads-ssl.webflow.com/64ff0f7cb968ca95de794a01/652d24b86bb740b2db09543e_22.png",
"https://uploads-ssl.webflow.com/64ff0f7cb968ca95de794a01/652d1d4822ff746542142354_6.png",
"https://uploads-ssl.webflow.com/64ff0f7cb968ca95de794a01/652d1d4879b85b719239081b_1.png",
"https://uploads-ssl.webflow.com/64ff0f7cb968ca95de794a01/652d24b86bb740b2db09543e_22.png",
"https://uploads-ssl.webflow.com/64ff0f7cb968ca95de794a01/652d1d4822ff746542142354_6.png",

];
// distance mouse needs to move before next image is shown
let distThreshold = 65;
// scale factor to size images
let scaleFactor = 5.5;
let images = [];
let queue = [];
let lastMousePos = { x: 0, y: 0 };
let imgIndex = 0;


function preload() {
  for (let i = 0; i < imageUrls.length; i++) {
    images[i] = loadImage(imageUrls[i]);
  }
}

function setup() {
  let cnv = createCanvas(windowWidth, windowHeight);
  cnv.parent("canvas-parent");
  cnv.style("display", "block");
  cnv.style("position", "absolute");
  cnv.style("inset", "0");
  cnv.style("z-index", "-1");
  lastMousePos = { x: mouseX, y: mouseY };
}

function draw() {
  // clear the canvas
  clear();

  let d = dist(mouseX, mouseY, lastMousePos.x, lastMousePos.y);


  if (d > distThreshold) {
    queue.unshift({ x: mouseX, y: mouseY, index: imgIndex });
    lastMousePos = { x: mouseX, y: mouseY };
    imgIndex = (imgIndex + 1) % images.length;
  }

  // maintain queue length equal to number of images by removing the last item
  if (queue.length > images.length) {
    queue.pop();
  }

  // define scale of images based on width of canvas
  let scale = width / scaleFactor;

  // draw images in queue
  // draw order is reversed so that the first image in the queue is drawn on top
  for (let i = queue.length - 1; i >= 0; i--) {
    let img = images[queue[i].index];
    if (img) {
      // scale image based on scale factor
      let imgWidth = (img.width * scale) / img.width;
      let imgHeight = (img.height * scale) / img.width;
      // draw image at mouse position offset by half of image width and height
      image(
        img,
        queue[i].x - imgWidth / 2,
        queue[i].y - imgHeight / 2,
        imgWidth,
        imgHeight
      );
    }
  }
}

// resize canvas when window is resized
function windowResized() {
  resizeCanvas(windowWidth, windowHeight);
}
</script>

<script src="https://cdn.jsdelivr.net/npm/@splidejs/splide@3.2.2/dist/js/splide.min.js"></script>


<script>

$(window).on('beforeunload', function() {
    $(window).scrollTop(0,0);
});


</script>



<script>
var element3 = document.getElementById('sec3').offsetHeight;
var value = 34;

function vhTOpx(value, element3) {
    var element4 = document.getElementById('sec4').offsetHeight;
    var w = window,
        d = document,
        e = d.documentElement,
        g = d.getElementsByTagName('body')[0],
        y = w.innerHeight || e.clientHeight || g.clientHeight;

    var result = (y * value) / 100;
    console.log(result);
    console.log(element3);


    var plus2 = element3 - 50 - result + element4;
    document.getElementById('divid').style.height = (plus2) + 'px';
    console.log(plus2);


    var vh_tien = result / 34 * 30;
    var proc_3_height = document.getElementById('proc_3').offsetHeight;

    var vh_honderd = result / 34 * 100;
    var height_proces_mobiel_blok = document.getElementById('proces-mobiel-blok').offsetHeight;


    console.log(document.getElementById('diff').getBoundingClientRect());
    var diff = document.getElementById('diff').offsetHeight;
    console.log(diff, "diff");

    document.getElementById('proces_line_track').style.height = (diff) + 'px';
    document.getElementById('proces_line_track2').style.height = (diff) + 'px';
    document.getElementById('proces_line_track3').style.height = (diff) + 'px';


    var padding = vh_honderd - vh_tien - height_proces_mobiel_blok;
    document.getElementById('proces-mobiel-blok').style.marginBottom = (padding) + 'px';

    var good_height = proc_3_height + vh_tien + padding + diff;
    document.getElementById('last_mobile_proces_padding_bottom').style.height = (good_height) + 'px';

}

function func() {


    var element1 = document.getElementById('sec1').offsetHeight;
    var element2 = document.getElementById('sec2').offsetHeight;
    var element3 = document.getElementById('sec3').offsetHeight;
    var element4 = document.getElementById('sec4').offsetHeight;

    var proces_mobiel_blok = document.getElementById('proces-mobiel-blok').offsetHeight;
    var sec_mobile = document.getElementById('sec-mobile').offsetHeight;
    var honderd_vh = document.getElementById('honderd-vh').offsetHeight;
    var honderd_vh2 = document.getElementById('honderd-vh2').offsetHeight;
    var value = 34;


    var plus4 = element3 + element4 + sec_mobile - proces_mobiel_blok ;
    document.getElementById('trig1').style.height = (plus4) + 'px';

    var plus5 = element3 + element4 + sec_mobile - proces_mobiel_blok - honderd_vh ;
    document.getElementById('trig2').style.height = (plus5) + 'px';

    var plus6 = element3 + element4 + sec_mobile - proces_mobiel_blok - honderd_vh - honderd_vh2 ;
    document.getElementById('trig3').style.height = (plus6) + 'px';
    console.log('goddam');
    }
    
func();

vhTOpx(value, element3);

$(window).resize(function() {
		//qq(value);
    console.log('window is resized');
    func();
});

func();

</script>

